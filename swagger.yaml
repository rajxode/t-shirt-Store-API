openapi: 3.0.0
info: # info about the project
  title: T-shirt Store API
  description: return product / user data
  version: 1.1.0

servers:
  # server url
  - url: "{protocol}://localhost:1000/api/{version}" 
    description: for local host server
    variables:
      # versions of api
      version:
        enum:
          - v1
          - v2
        default: v1
      #  protocols 
      protocol:
        enum:
          - http
          - https
        default: http

# for auth
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

# routes
paths:
  /:
    get:
    # grouping the paths
      tags:
        - Greetings
      summary: return a greeting message
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: string
                example: "greetingString"
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /user/signup:
    post:
      tags:
        - User
      summary: create a new user inside the database
      # type of data taken
      consumes:
        - multipart/form-data
      # type of output produced
      produces:
        - application/json
      # params passed to add new course
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          multipart/form-data:
            schema:
              # takes an object
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                photo:
                  type: string
                  format: binary
      responses:
        200:
        # return the entered object
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      createdAt:
                        type: date
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /user/login:
    post:
      tags:
        - User
      summary: login user and create a new token
      # type of data taken
      consumes:
        - application/json
      # type of output produced
      produces:
        - application/json
      # params passed to add new course
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
        # return the entered object
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /user/logout:
    get:
    # grouping the paths
      tags:
        - User
      summary: logout user by removing his token
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /user/forgetpassword:
    post:
      tags:
        - User
      summary: send a mail to user containing url to reset password
      # type of data taken
      consumes:
        - application/json
      # type of output produced
      produces:
        - application/json
      # params passed to add new course
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
        # return the entered object
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  /user/password/reset/{token}:
    post:
    # grouping the paths
      tags:
        - User
      summary: reset the password
      # for parameter passed inside the path
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object
              type: object
              properties:
                password:
                  type: string
                cnfPassword:
                  type: string
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  /user/dashboard:
    get:
    # grouping the paths
      tags:
        - User
      summary: return info of loggedIn user
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  /user/password/update:
    post:
    # grouping the paths
      tags:
        - User
      summary: update user's password
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                cnfPassword:
                  type: string
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  /admin/userList:
    get:
    # grouping the paths
      tags:
        - Admin
      summary: if logged in person is admin, return list of all the user inside the database
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items: 
                      type: object
                      properties:
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        createdAt:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  /admin/singleUser/{id}:
    get:
    # grouping the paths
      tags:
        - Admin
      summary: if logged in person is admin, return a single user by his id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      createdAt:
                        type: string 
        400:
          description: Bad request
        500:
          description: Internal Server Error
    
    put:
    # grouping the paths
      tags:
        - Admin
      summary: if logged in person is admin, return a single user by his id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          multipart/form-data:
            schema:
              # takes an object
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                  enum: [user,admin,manager]
                  default: user
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      createdAt:
                        type: string 
        400:
          description: Bad request
        500:
          description: Internal Server Error

    delete:
    # grouping the paths
      tags:
        - Admin
      summary: if logged in person is admin, delete a single user by his id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error