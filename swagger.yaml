openapi: 3.0.0
info: # info about the project
  title: T-shirt Store API
  description: return product / user data based on different urls
  version: 1.1.0

servers:
  # server url
  - url: "{protocol}://localhost:1000/api/{version}" 
    description: for local host server
    variables:
      # versions of api
      version:
        enum:
          - v1
        default: v1
      #  protocols 
      protocol:
        enum:
          - http
        default: http

# for auth
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer

# routes
paths:
  # home route
  /:
    get:
    # grouping the paths
      tags:
        - Greetings
      summary: return a greeting message
      # response
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              # response message
              schema:
                type: string
                example: "greetingString"
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # signup route for a user
  /user/signup:
    post:
      tags:
        - User
      summary: create a new user inside the database
      # type of data taken
      consumes:
        - multipart/form-data
      # type of output produced
      produces:
        - application/json
      # data passed to the req.body
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          multipart/form-data:
            schema:
              # takes an object
              type: object
              properties:
                # user name
                name:
                  type: string
                # user email
                email:
                  type: string
                # password
                password:
                  type: string
                # photo
                photo:
                  type: string
                  format: binary
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return the created user
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # login route for user
  /user/login:
    post:
      tags:
        - User
      summary: login user and create a new token
      # type of data taken
      consumes:
        - application/json
      # type of output produced
      produces:
        - application/json
      # values to be passed inside req.body
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing email and password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return the login user's data
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # route for logging out the user
  /user/logout:
    get:
    # grouping the paths
      tags:
        - User
      summary: logout user by removing his token
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return success message
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # route for forgetpassword, send email to user for reset password url
  /user/forgetpassword:
    post:
      tags:
        - User
      summary: send a mail at given email address containing url to reset password
      # type of data taken
      consumes:
        - application/json
      # type of output produced
      produces:
        - application/json
      # values to be passed in req.body , user's email
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object
              type: object
              properties:
                email:
                  type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return success message
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # route to reset password of user, in case user forget his password
  /user/password/reset/{token}:
    post:
    # grouping the paths
      tags:
        - User
      summary: reset the password of logged in user
      # for parameter passed inside the path
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing new password, and confirm password
              type: object
              properties:
                password:
                  type: string
                cnfPassword:
                  type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return new token and user's data
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # dashboard for logged in user to see his data
  /user/dashboard:
    get:
    # grouping the paths
      tags:
        - User
      summary: return info of logged in user
      # response
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return logged in user's data
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # update the password of logged in user
  /user/password/update:
    post:
    # grouping the paths
      tags:
        - User
      summary: update logged in user's password
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing old password, new password and confirm password
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                cnfPassword:
                  type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return user's data and his token
                type: object
                properties:
                  success: 
                    type: boolean
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # route for admin to see list of all the user
  /admin/userList:
    get:
    # grouping the paths
      tags:
        - Admin
      summary: if Admin, return list of all the user inside the database
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array of all the users
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items: 
                      type: object
                      properties:
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        createdAt:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error


  # route for manager to get list of all the user with role = 'user'
  /manager/userList:
    get:
    # grouping the paths
      tags:
        - Manager
      summary: if Manager, return list of all users with role 'user'
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array of all the users
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items: 
                      type: object
                      properties:
                        photo:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                        id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        createdAt:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error


  # route for admin to see info an user by his id
  /admin/singleUser/{id}:
    get:
    # grouping the paths
      tags:
        - Admin
      summary: if Admin, return a single user by his id
      # params 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return user's data
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      createdAt:
                        type: string 
        400:
          description: Bad request
        500:
          description: Internal Server Error
    
    # to update info of any user by his id
    put:
    # grouping the paths
      tags:
        - Admin
      summary: if Admin, return a single user by his id
      # params
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          multipart/form-data:
            schema:
              # takes an object containing user's data
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                  enum: [user,admin,manager]
                  default: user
      # response of user
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return updated user data
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      photo:
                        type: object
                        properties:
                          id:
                            type: string
                          secure_url:
                            type: string
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      createdAt:
                        type: string 
        400:
          description: Bad request
        500:
          description: Internal Server Error

    # route for admin to delete any user by his id
    delete:
    # grouping the paths
      tags:
        - Admin
      summary: if Admin, delete a single user by his id
      # params
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return success message
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server 
          
  # route for admin to add a new product
  /admin/product/addProduct:
    post:
      tags:
        - Admin
      summary: if Admin, create add a new Product
      # type of data taken
      consumes:
        - multipart/form-data
      # type of output produced
      produces:
        - application/json
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          multipart/form-data:
            schema:
              # takes an object containing product data
              type: object
              properties:
                # name
                name:
                  type: string
                # product price
                price:
                  type: number
                # description of product
                description:
                  type: string
                # images related to product
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                # product category
                category:
                  type: string
                  enum: [shortSleeves,longSleeves,sweatShirts,hoodies]
                  default: shortSleeves
                # product's brand
                brand:
                  type: string
      # response generated
      responses:
        200:
        # return the entered object
          description: Success, OK
          content:
            application/json:
              schema:
                # return the product created
                type: object
                properties:
                  success: 
                    type: boolean
                  product:
                    type: object
                    properties:
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      category:
                        type: string
                      brand:
                        type: string
                      rating:
                        type: number
                      numberOfReviews:
                        type: number
                      reviews:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
                            comment:
                              type: string
                      user:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # route for any logged in user to get list of all the product
  /product/getAllProducts:
    get:
      tags:
        - Product
      summary: if logged in, return list of all the products
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array of all the products
                type: object
                properties:
                  success: 
                    type: boolean
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        price:
                          type: number
                        description:
                          type: string
                        photos:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              secure_url:
                                type: string
                        category:
                          type: string
                        brand:
                          type: string
                        rating:
                          type: number
                        numberOfReviews:
                          type: number
                        reviews:
                          type: array
                          items:
                            type: object
                            properties:
                              user:
                                type: string
                              name:
                                type: string
                              rating:
                                type: number
                              comment:
                                type: string
                        user:
                          type: string
                        createdAt:
                          type: string
                    filteredProducts:
                      type: number
                    totalProduct:
                      type: number
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # route for admin to get list of all the products
  /admin/product/adminGetProducts:
    get:
      tags:
        - Admin
      summary: if admin, return list of all the products
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array of all the products
                type: object
                properties:
                  success: 
                    type: boolean
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        price:
                          type: number
                        description:
                          type: string
                        photos:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              secure_url:
                                type: string
                        category:
                          type: string
                        brand:
                          type: string
                        rating:
                          type: number
                        numberOfReviews:
                          type: number
                        reviews:
                          type: array
                          items:
                            type: object
                            properties:
                              user:
                                type: string
                              name:
                                type: string
                              rating:
                                type: number
                              comment:
                                type: string
                        user:
                          type: string
                        createdAt:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # route for admin to update the data of any product by product id
  /admin/product/{id}:
    put:
      tags:
        - Admin
      summary: if admin, update data of product by product_id
      # params
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      consumes:
        - multipart/form-data
      # type of output produced
      produces:
        - application/json
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          multipart/form-data:
            schema:
              # takes an object containing product data
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                description:
                  type: string
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                category:
                  type: string
                  enum: [shortSleeves,longSleeves,sweatShirts,hoodies]
                  default: shortSleeves
                brand:
                  type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return the updated product
                type: object
                properties:
                  success: 
                    type: boolean
                  product:
                    type: object
                    properties:
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      category:
                        type: string
                      brand:
                        type: string
                      rating:
                        type: number
                      numberOfReviews:
                        type: number
                      reviews:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
                            comment:
                              type: string
                      user:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

    # route for admin to delete any product by it's id
    delete:
      tags:
        - Admin
      summary: if admin, delete a product by product_id
      # params
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return success message
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # route for all the logged in user to get product info of any product by id
  /product/getOneProduct/{id}:
    get:
      tags:
        - Product
      summary: if logged in, return a single product by it's id
      # params product id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, Ok
          content:
            application/json:
              schema:
                # return the data of product
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    type: object
                    properties:
                      name:
                        type: string
                      price:
                        type: number
                      description:
                        type: string
                      photos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            secure_url:
                              type: string
                      category:
                        type: string
                      brand:
                        type: string
                      rating:
                        type: number
                      numberOfReviews:
                        type: number
                      reviews:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              type: string
                            name:
                              type: string
                            rating:
                              type: number
                            comment:
                              type: string
                      user:
                        type: string
                      createdAt:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # route to add a review to any product
  /product/addReview/{id}:
    put:
      tags:
        - Product
      summary: if logged in, add a review on any product by giving product id
      # params product id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      consumes:
        - application/json
      # type of output produced
      produces:
        - application/json
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing product rating and feedback/comment about the product
              type: object
              properties:
                rating:
                  type: number
                  default: 0
                comment:
                  type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return success message
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # route to delete review of logged in user from a product
  /product/deleteReview/{id}:
    delete:
      tags:
        - Product
      summary: if logged in, delete user's review on a product
      # params for product id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return success message
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # route to get list of all the reviews on a product 
  /product/allReview/{id}:
    get:
      tags:
        - Product
      summary: if logged in, return all reviews on a product
      # params for product id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array containing all the reviews on product
                type: object
                properties:
                  success: 
                    type: boolean
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: string
                        rating:
                          type: number
                        name:
                          type: string
                        comment:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # return stripe public key
  /payment/stripeKey:
    get:
      tags:
        - Payment
      summary: if logged in, return the public key of stripe
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array containing all the reviews on product
                type: object
                properties:
                  stripeKey: 
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # return razorpay public key
  /payment/razorpayKey:
    get:
      tags:
        - Payment
      summary: if logged in, return the public key of razorpay
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return array containing all the reviews on product
                type: object
                properties:
                  razorpayKey: 
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # stripe capture payment
  /payment/stripePayment:
    post:
      tags:
        - Payment
      summary: if logged in, capture the payment for stripe
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing amount to be paid
              type: object
              properties:
                amount:
                  type: number
                  default: 0
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  client_secret:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # razorpay capture payment
  /payment/razorpayPayment:
    post:
      tags:
        - Payment
      summary: if logged in, capture the payment for razorpay
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing amount to be paid
              type: object
              properties:
                amount:
                  type: number
                  default: 0
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  amount:
                    type: number
                  orderId:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # creating a new order
  /order/create:
    post:
      tags:
        - Order
      summary: if logged in, place a new order for a product
      # type of data taken
      consumes:
        - application/json
      # type of output produced
      produces:
        - application/json
      # data passed to the req.body
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object
              type: object
              required:
                - shippingInfo
                - paymentInfo
                - taxAmount
                - shippingAmount
                - totalAmount
                - orderItems
              properties:
                # address for shippment
                shippingInfo:
                  type: object
                  properties:
                    # address
                    address:
                      type: string
                    # city 
                    city:
                      type: string
                    # contact number
                    phoneNo:
                      type: string
                    # state
                    state:
                      type: string
                    # postal code
                    pincode:
                      type: string
                    # country
                    country:
                      type: string
                # order details
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:
                      # product name
                      name:
                        type: string
                      # product quantity
                      quantity:
                        type: number
                      # image related to product
                      image:
                        type: string
                        format: binary
                      # price of product
                      price:
                        type: number
                      # product id
                      product:
                        type: string
                # payment info
                paymentInfo:
                  type: object
                  properties:
                    id:
                      type: string
                # tax amount applied on product
                taxAmount:
                  type: number
                # shipping charges on product
                shippingAmount:
                  type: number
                # total amount of product
                totalAmount:
                  type: number
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  order:
                    type: object
                    properties:
                      # address for shippment
                      shippingInfo:
                        type: object
                        properties:
                          # address
                          address:
                            type: string
                          # city 
                          city:
                            type: string
                          # contact number
                          phoneNo:
                            type: string
                          # state
                          state:
                            type: string
                          # postal code
                          pincode:
                            type: string
                          # country
                          country:
                            type: string
                      # order details
                      orderItems:
                        type: array
                        items:
                          type: object
                          properties:
                            # product name
                            name:
                              type: string
                            # product quantity
                            quantity:
                              type: number
                            # image related to product
                            image:
                              type: string
                            # price of product
                            price:
                              type: number
                            # product id
                            product:
                              type: string
                              description: product id
                      # payment info
                      paymentInfo:
                        type: object
                        properties:
                          id:
                            type: string
                      # tax amount applied on product
                      taxAmount:
                        type: number
                      # shipping charges on product
                      shippingAmount:
                        type: number
                      # total amount of product
                      totalAmount:
                        type: number
                      # user who placed the order
                      user:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # return all order for a user
  /order/myorder:
    get:
      tags:
        - Order
      summary: if logged in, return all the orders of logged in user
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        # address for shippment
                        shippingInfo:
                          type: object
                          properties:
                            # address
                            address:
                              type: string
                            # city 
                            city:
                              type: string
                            # contact number
                            phoneNo:
                              type: string
                            # state
                            state:
                              type: string
                            # postal code
                            pincode:
                              type: string
                            # country
                            country:
                              type: string
                        # order details
                        orderItems:
                          type: array
                          items:
                            type: object
                            properties:
                              # product name
                              name:
                                type: string
                              # product quantity
                              quantity:
                                type: number
                              # image related to product
                              image:
                                type: string
                              # price of product
                              price:
                                type: number
                              # product id
                              product:
                                type: string
                                description: product id
                        # payment info
                        paymentInfo:
                          type: object
                          properties:
                            id:
                              type: string
                        # tax amount applied on product
                        taxAmount:
                          type: number
                        # shipping charges on product
                        shippingAmount:
                          type: number
                        # total amount of product
                        totalAmount:
                          type: number
                        # user who placed the order
                        user:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error
  
  # to get an order by it's id
  /order/{id}:
    get:
      tags:
        - Order
      summary: if logged in, return an order by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  order:
                    type: object
                    properties:
                      # address for shippment
                      shippingInfo:
                        type: object
                        properties:
                          # address
                          address:
                            type: string
                          # city 
                          city:
                            type: string
                          # contact number
                          phoneNo:
                            type: string
                          # state
                          state:
                            type: string
                          # postal code
                          pincode:
                            type: string
                          # country
                          country:
                            type: string
                      # order details
                      orderItems:
                        type: array
                        items:
                          type: object
                          properties:
                            # product name
                            name:
                              type: string
                            # product quantity
                            quantity:
                              type: number
                            # image related to product
                            image:
                              type: string
                            # price of product
                            price:
                              type: number
                            # product id
                            product:
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                      # payment info
                      paymentInfo:
                        type: object
                        properties:
                          id:
                            type: string
                      # tax amount applied on product
                      taxAmount:
                        type: number
                      # shipping charges on product
                      shippingAmount:
                        type: number
                      # total amount of product
                      totalAmount:
                        type: number
                      # user who placed the order
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                          email:
                            type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # for admin to see all the orders
  /admin/order/getAllOrder:
    get:
      tags:
        - Admin
      summary: if admin, return all orders inside the database
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        # address for shippment
                        shippingInfo:
                          type: object
                          properties:
                            # address
                            address:
                              type: string
                            # city 
                            city:
                              type: string
                            # contact number
                            phoneNo:
                              type: string
                            # state
                            state:
                              type: string
                            # postal code
                            pincode:
                              type: string
                            # country
                            country:
                              type: string
                        # order details
                        orderItems:
                          type: array
                          items:
                            type: object
                            properties:
                              # product name
                              name:
                                type: string
                              # product quantity
                              quantity:
                                type: number
                              # image related to product
                              image:
                                type: string
                              # price of product
                              price:
                                type: number
                              # product id
                              product:
                                type: string
                                description: product id
                        # payment info
                        paymentInfo:
                          type: object
                          properties:
                            id:
                              type: string
                        # tax amount applied on product
                        taxAmount:
                          type: number
                        # shipping charges on product
                        shippingAmount:
                          type: number
                        # total amount of product
                        totalAmount:
                          type: number
                        # user who placed the order
                        user:
                          type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # for admin to update an order's data
  /admin/order/update/{id}:
    put:
      tags:
        - Admin
      summary: if admin, update an order's status and other data by order id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        # all values are required
        required: true
        # content 
        content:
          application/json:
            schema:
              # takes an object containing amount to be paid
              type: object
              properties:
                orderStatus:
                  type: string
                  enum: [processing,delivered,cancelled]
                  default: processing
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  order:
                    type: object
                    properties:
                      # address for shippment
                      shippingInfo:
                        type: object
                        properties:
                          # address
                          address:
                            type: string
                          # city 
                          city:
                            type: string
                          # contact number
                          phoneNo:
                            type: string
                          # state
                          state:
                            type: string
                          # postal code
                          pincode:
                            type: string
                          # country
                          country:
                            type: string
                      # order details
                      orderItems:
                        type: array
                        items:
                          type: object
                          properties:
                            # product name
                            name:
                              type: string
                            # product quantity
                            quantity:
                              type: number
                            # image related to product
                            image:
                              type: string
                            # price of product
                            price:
                              type: number
                            # product id
                            product:
                              type: string
                      # payment info
                      paymentInfo:
                        type: object
                        properties:
                          id:
                            type: string
                      # tax amount applied on product
                      taxAmount:
                        type: number
                      # shipping charges on product
                      shippingAmount:
                        type: number
                      # total amount of product
                      totalAmount:
                        type: number
                      # user who placed the order
                      user:
                        type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  # for admin to delete an order by id
  /admin/order/delete/{id}:
    delete:
      tags:
        - Admin
      summary: if admin, delete an order by order id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      # response generated
      responses:
        200:
          description: Success, OK
          content:
            application/json:
              schema:
                # return details about the payment
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error